"0","# Temperature compartments comparison"
"0","compare_seq <- c(paste(""compare_"", temp_range[1],""_"",temp_range[2], sep = """"), "
"0","                 paste(""compare_"", temp_range[1],""_"",temp_range[3], sep = """"),"
"0","                 paste(""compare_"", temp_range[1],""_"",temp_range[4], sep = """"), "
"0","                 paste(""compare_"", temp_range[1],""_"",temp_range[5], sep = """"),"
"0","                 paste(""compare_"", temp_range[2],""_"",temp_range[3], sep = """"), "
"0","                 paste(""compare_"", temp_range[2],""_"",temp_range[4], sep = """"),"
"0","                 paste(""compare_"", temp_range[2],""_"",temp_range[5], sep = """"),"
"0","                 paste(""compare_"", temp_range[3],""_"",temp_range[4], sep = """"),"
"0","                 paste(""compare_"", temp_range[3],""_"",temp_range[5], sep = """"), "
"0","                 paste(""compare_"", temp_range[4],""_"",temp_range[5], sep = """"))"
"0","                "
"0","# Create empty data frame to store matrices"
"0","OG_mat <- list()"
"0","# Create empty data frame to store p values"
"0","OG_p_vals <- data.frame(p_values = rep(NA, 1, 10), row.names = compare_seq)"
"0",""
"0","# Run loop to calculate test statistic and resulting p value for each temperature compartment comparison and experimental phase"
"0","for (ttt in 1:length(compare_seq)) {"
"0","  # Counter"
"0","  test <- compare_seq[ttt] "
"0","  for (xxx in 1:nrow(exp_data)) { "
"0","    # Create empty data frame to store loop value"
"0","    OG_mat[[xxx]] <- matrix(data=NA, nrow=1, ncol=1); "
"0","    for (i in 1:nrow(exp_data)) {"
"0","      # Create blank matrix to temporarily hold data for each iteration"
"0","      OG_rank_mat <- matrix(data=NA, nrow=1, ncol=1); "
"0","      "
"0","      # Fill in matrix "
"0","      if (test == compare_seq[1]) {"
"0","        OG_rank_mat[1,1] <- log(exp_data$C1[i]/exp_data$C2[i]) - log(c1/c2) "
"0","      } else if (test == compare_seq[2]) {"
"0","        OG_rank_mat[1,1] <- log(exp_data$C1[i]/exp_data$C3[i]) - log(c1/c3) "
"0","      } else if (test == compare_seq[3]) {"
"0","        OG_rank_mat[1,1] <- log(exp_data$C1[i]/exp_data$C4[i]) - log(c1/c4) "
"0","      } else if (test == compare_seq[4]) {"
"0","        OG_rank_mat[1,1] <- log(exp_data$C1[i]/exp_data$C5[i]) - log(c1/c5) "
"0","      } else if (test == compare_seq[5]) {"
"0","        OG_rank_mat[1,1] <- log(exp_data$C2[i]/exp_data$C3[i]) - log(c2/c3)"
"0","      } else if (test == compare_seq[6]) {"
"0","        OG_rank_mat[1,1] <- log(exp_data$C2[i]/exp_data$C4[i]) - log(c2/c4) "
"0","      } else if (test == compare_seq[7]) {"
"0","        OG_rank_mat[1,1] <- log(exp_data$C2[i]/exp_data$C5[i]) - log(c2/c5) "
"0","      } else if (test == compare_seq[8]) {"
"0","        OG_rank_mat[1,1] <- log(exp_data$C3[i]/exp_data$C4[i]) - log(c3/c4) "
"0","      } else if (test == compare_seq[9]) {"
"0","        OG_rank_mat[1,1] <- log(exp_data$C3[i]/exp_data$C5[i]) - log(c3/c5) "
"0","      } else if (test == compare_seq[10]) {"
"0","        OG_rank_mat[1,1] <- log(exp_data$C4[i]/exp_data$C5[i]) - log(c4/c5) "
"0","      }"
"0","      OG_mat[[i]] <- OG_rank_mat"
"0","      rm(OG_rank_mat) # Remove variable for next iteration"
"0","      "
"0","      # Calculate element wise mean, sd, se"
"0","      # Make a 3D array from list of matrices for calculation purposes"
"0","      OG_arr <- array(unlist(OG_mat), c(1, 1, nrow(exp_data)))"
"0","      # Get mean, sd, se of third dimension (i.e. mean of all experiments)"
"0","      OG_mean <- apply(OG_arr, 1:2, mean)"
"0","      OG_sd <- apply(OG_arr, 1:2, sd)"
"0","      OG_var <- apply(OG_arr, 1:2, var)"
"0","      OG_se <- OG_sd / sqrt(nrow(exp_data))"
"0","      OG_test_stat <- abs(OG_mean / OG_se)"
"0","      "
"0","      # Calculate P value from test statistic (T score = mean / se)"
"0","      OG_p_vals[ttt, 1] <- 2 * pt(q = OG_test_stat, df = 4, lower.tail = FALSE)"
"0","      rm(OG_test_stat)"
"0","    } "
"0","  }"
"0","}"
"0",""
"0","# P values for chosen phase and if applicable treatment compartment comparison"
"0","# format(OG_p_vals, scientific = FALSE)"
"0","print(OG_p_vals)"
