rm(df_list)
combined_rows <- function(input_list) {
test <- bind_rows(input_list) %>%
summarise_all(~ sum(., na.rm = TRUE))
}
# First step - Apply combined rows function to each experiment, summing total count of fish in each compartment
non_gradient_separate <- lapply(non_gradient, combined_rows)
acute_separate <- lapply(acute, combined_rows)
final_separate <- lapply(final, combined_rows)
# Clear space in environment
rm(list = c("non_gradient", "acute", "final"))
# Column index
zones_1_8 <- c(2:9)
# Create new data frame with the number of experiments as objects and each temperature zone (1-8) as variables
non_grad_dat <- data.frame(t(sapply(non_gradient_separate, "[", zones_1_8)))
# add column with total count per experiment
non_grad_dat$count <- rowSums(matrix(unlist(non_grad_dat), ncol = 8, byrow = FALSE))
acute_dat <- data.frame(t(sapply(acute_separate, "[", zones_1_8)))
# add column with total count per experiment
acute_dat$count <- rowSums(matrix(unlist(acute_dat), ncol = 8, byrow = FALSE))
final_dat <- data.frame(t(sapply(final_separate, "[", zones_1_8)))
# add column with total count per experiment
final_dat$count <- rowSums(matrix(unlist(final_dat), ncol = 8, byrow = FALSE))
# Combine into non gradient, acute, and final observations into one data frame
combined_dat <- data.frame(rbind(non_grad_dat, acute_dat, final_dat))
View(combined_dat)
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
View(tmp_dat)
if(exists("number_treatments")) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, times = nrow(non_grad_dat) / number_treatments * number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else {
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(3:10)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
}
View(tmp_dat)
if(exists("number_treatments")) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase")
# add_column(treatment = rep(treatments, times = nrow(non_grad_dat) / number_treatments * number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else {
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(3:10)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
}
rep(treatments, each = number_groups, times = number_phases)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
if(!require(easypackages)) install.packages("easypackages")
easypackages::packages(c("tidyverse", "readxl", "fs", "here", "ggpubr", "gtools"), prompt = FALSE)
# Number of experimental subjects (i.e. how many organisms tracked by ethovision in each experiment)
number_subjects <- 6
# Number of experimental groups
number_groups <- 2
# Number of treatments; Leave commented out if no treatments
number_treatments <- 2
# Corresponding to order in excel files
treatments <- c("high", "low")
# Number of experimental phases (i.e. non-gradient, acute, final observations)
number_phases <- 3
# Length of observation phase in seconds (i.e. 3600 = 1 hr observation)
length_phase <- 3600
# Ethovision tracking analysis frequency (per second)
# e.g. 25 means the subject(s) were tracked 25 times per second; 1 means the subject(s) tracked 1 time per second
track_freq <- 1
# Temperature range of preference chamber
# Starting with warmest temperature to coldest
temp_range <-  c("33*C", "30*C", "27*C", "24*C", "21*C")
multiplesheets <- function(fname) {
# Get info about all excel sheets
sheets <- excel_sheets(fname)
sheets2 <- sheets[1:number_subjects] # Number of sheets in each excel file; 1 sheet per tracked subject
tibble <- lapply(sheets2, function(x) read_excel(fname, col_names = TRUE, na = "-", sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# Change names of sheets
# Rename sheets for each subject in the experiment; 1 sheet per tracked subject
sheets_new <- paste0("subject_", 1:number_subjects)
names(data_frame) <- sheets_new
#Print data frame
print(data_frame)
}
# Get list of all excel files in R project folder
# mixedsort puts files in order from 1 to 12 (if not 10 comes before 2)
file_list <- mixedsort(list.files(pattern = "*xlsx"))
# Create data frame containing each excel file and sheets
df_list <- lapply(set_names(file_list), multiplesheets)
non_gradient <- df_list[grepl("NG", names(df_list))]
acute <- df_list[grepl("A", names(df_list))]
final <- df_list[grepl("F", names(df_list))]
# Clear space in environment
rm(df_list)
combined_rows <- function(input_list) {
test <- bind_rows(input_list) %>%
summarise_all(~ sum(., na.rm = TRUE))
}
# First step - Apply combined rows function to each experiment, summing total count of fish in each compartment
non_gradient_separate <- lapply(non_gradient, combined_rows)
acute_separate <- lapply(acute, combined_rows)
final_separate <- lapply(final, combined_rows)
# Clear space in environment
rm(list = c("non_gradient", "acute", "final"))
# Column index
zones_1_8 <- c(2:9)
# Create new data frame with the number of experiments as objects and each temperature zone (1-8) as variables
non_grad_dat <- data.frame(t(sapply(non_gradient_separate, "[", zones_1_8)))
# add column with total count per experiment
non_grad_dat$count <- rowSums(matrix(unlist(non_grad_dat), ncol = 8, byrow = FALSE))
acute_dat <- data.frame(t(sapply(acute_separate, "[", zones_1_8)))
# add column with total count per experiment
acute_dat$count <- rowSums(matrix(unlist(acute_dat), ncol = 8, byrow = FALSE))
final_dat <- data.frame(t(sapply(final_separate, "[", zones_1_8)))
# add column with total count per experiment
final_dat$count <- rowSums(matrix(unlist(final_dat), ncol = 8, byrow = FALSE))
# Combine into non gradient, acute, and final observations into one data frame
combined_dat <- data.frame(rbind(non_grad_dat, acute_dat, final_dat))
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
if(exists("number_treatments") & number_groups > 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else if (exists("number_treaments" & number_groups < 2)) {
add_column(treatment = rep(treatments, times = nrow(non_grad_dat) / number_treatments * number_phases), .after = "phase")
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else {
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(3:10)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
}
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
if(exists("number_treatments") & number_groups > 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else if (exists("number_treaments" & number_groups = 2)) {
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
if(exists("number_treatments") & number_groups > 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else if (exists("number_treaments")) {
add_column(treatment = rep(treatments, times = nrow(non_grad_dat) / number_treatments * number_phases), .after = "phase")
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else {
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(3:10)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
}
View(tmp_dat)
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
if(exists("number_treatments") & number_groups > 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else if (exists("number_treaments")) {
add_column(treatment = rep(treatments, times = nrow(non_grad_dat) / number_treatments * number_phases), .after = "phase")
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else {
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(3:10)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
}
View(tmp_dat)
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
if(exists("number_treatments") & number_groups > 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else if (exists("number_treaments") & number_groups = 2) {
exists("number_treaments")
number_groups
exists("number_treatments")
exists("number_treaments")
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
if(exists("number_treatments") & number_groups > 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else if (exists("number_treatments") & number_groups == 2) {
add_column(treatment = rep(treatments, times = nrow(non_grad_dat) / number_treatments * number_phases), .after = "phase")
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else {
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(3:10)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
}
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
if(exists("number_treatments") & number_groups > 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else if (exists("number_treatments") & number_groups = 2) {
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
if(exists("number_treatments") & number_groups > 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else if (exists("number_treatments") & number_groups <= 2) {
add_column(treatment = rep(treatments, times = nrow(non_grad_dat) / number_treatments * number_phases), .after = "phase")
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else {
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(3:10)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
}
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
if(!require(easypackages)) install.packages("easypackages")
easypackages::packages(c("tidyverse", "readxl", "fs", "here", "ggpubr", "gtools"), prompt = FALSE)
# Number of experimental subjects (i.e. how many organisms tracked by ethovision in each experiment)
number_subjects <- 6
# Number of experimental groups
number_groups <- 2
# Number of treatments; Leave commented out if no treatments
number_treatments <- 2
# Corresponding to order in excel files
treatments <- c("high", "low")
# Number of experimental phases (i.e. non-gradient, acute, final observations)
number_phases <- 3
# Length of observation phase in seconds (i.e. 3600 = 1 hr observation)
length_phase <- 3600
# Ethovision tracking analysis frequency (per second)
# e.g. 25 means the subject(s) were tracked 25 times per second; 1 means the subject(s) tracked 1 time per second
track_freq <- 1
# Temperature range of preference chamber
# Starting with warmest temperature to coldest
temp_range <-  c("33*C", "30*C", "27*C", "24*C", "21*C")
multiplesheets <- function(fname) {
# Get info about all excel sheets
sheets <- excel_sheets(fname)
sheets2 <- sheets[1:number_subjects] # Number of sheets in each excel file; 1 sheet per tracked subject
tibble <- lapply(sheets2, function(x) read_excel(fname, col_names = TRUE, na = "-", sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# Change names of sheets
# Rename sheets for each subject in the experiment; 1 sheet per tracked subject
sheets_new <- paste0("subject_", 1:number_subjects)
names(data_frame) <- sheets_new
#Print data frame
print(data_frame)
}
# Get list of all excel files in R project folder
# mixedsort puts files in order from 1 to 12 (if not 10 comes before 2)
file_list <- mixedsort(list.files(pattern = "*xlsx"))
# Create data frame containing each excel file and sheets
df_list <- lapply(set_names(file_list), multiplesheets)
non_gradient <- df_list[grepl("NG", names(df_list))]
acute <- df_list[grepl("A", names(df_list))]
final <- df_list[grepl("F", names(df_list))]
# Clear space in environment
rm(df_list)
combined_rows <- function(input_list) {
test <- bind_rows(input_list) %>%
summarise_all(~ sum(., na.rm = TRUE))
}
# First step - Apply combined rows function to each experiment, summing total count of fish in each compartment
non_gradient_separate <- lapply(non_gradient, combined_rows)
acute_separate <- lapply(acute, combined_rows)
final_separate <- lapply(final, combined_rows)
# Clear space in environment
rm(list = c("non_gradient", "acute", "final"))
# Column index
zones_1_8 <- c(2:9)
# Create new data frame with the number of experiments as objects and each temperature zone (1-8) as variables
non_grad_dat <- data.frame(t(sapply(non_gradient_separate, "[", zones_1_8)))
# add column with total count per experiment
non_grad_dat$count <- rowSums(matrix(unlist(non_grad_dat), ncol = 8, byrow = FALSE))
acute_dat <- data.frame(t(sapply(acute_separate, "[", zones_1_8)))
# add column with total count per experiment
acute_dat$count <- rowSums(matrix(unlist(acute_dat), ncol = 8, byrow = FALSE))
final_dat <- data.frame(t(sapply(final_separate, "[", zones_1_8)))
# add column with total count per experiment
final_dat$count <- rowSums(matrix(unlist(final_dat), ncol = 8, byrow = FALSE))
# Combine into non gradient, acute, and final observations into one data frame
combined_dat <- data.frame(rbind(non_grad_dat, acute_dat, final_dat))
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
if(exists("number_treatments") & number_groups > 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else if (exists("number_treatments") & number_groups == 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, times = nrow(non_grad_dat) / number_treatments * number_phases), .after = "phase")
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else {
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(3:10)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
}
View(tmp_dat)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
if(!require(easypackages)) install.packages("easypackages")
easypackages::packages(c("tidyverse", "readxl", "fs", "here", "ggpubr", "gtools"), prompt = FALSE)
# Number of experimental subjects (i.e. how many organisms tracked by ethovision in each experiment)
number_subjects <- 6
# Number of experimental groups
number_groups <- 2
# Number of treatments; Leave commented out if no treatments
number_treatments <- 2
# Corresponding to order in excel files
treatments <- c("high", "low")
# Number of experimental phases (i.e. non-gradient, acute, final observations)
number_phases <- 3
# Length of observation phase in seconds (i.e. 3600 = 1 hr observation)
length_phase <- 3600
# Ethovision tracking analysis frequency (per second)
# e.g. 25 means the subject(s) were tracked 25 times per second; 1 means the subject(s) tracked 1 time per second
track_freq <- 1
# Temperature range of preference chamber
# Starting with warmest temperature to coldest
temp_range <-  c("33*C", "30*C", "27*C", "24*C", "21*C")
multiplesheets <- function(fname) {
# Get info about all excel sheets
sheets <- excel_sheets(fname)
sheets2 <- sheets[1:number_subjects] # Number of sheets in each excel file; 1 sheet per tracked subject
tibble <- lapply(sheets2, function(x) read_excel(fname, col_names = TRUE, na = "-", sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# Change names of sheets
# Rename sheets for each subject in the experiment; 1 sheet per tracked subject
sheets_new <- paste0("subject_", 1:number_subjects)
names(data_frame) <- sheets_new
#Print data frame
print(data_frame)
}
# Get list of all excel files in R project folder
# mixedsort puts files in order from 1 to 12 (if not 10 comes before 2)
file_list <- mixedsort(list.files(pattern = "*xlsx"))
# Create data frame containing each excel file and sheets
df_list <- lapply(set_names(file_list), multiplesheets)
non_gradient <- df_list[grepl("NG", names(df_list))]
acute <- df_list[grepl("A", names(df_list))]
final <- df_list[grepl("F", names(df_list))]
# Clear space in environment
rm(df_list)
combined_rows <- function(input_list) {
test <- bind_rows(input_list) %>%
summarise_all(~ sum(., na.rm = TRUE))
}
# First step - Apply combined rows function to each experiment, summing total count of fish in each compartment
non_gradient_separate <- lapply(non_gradient, combined_rows)
acute_separate <- lapply(acute, combined_rows)
final_separate <- lapply(final, combined_rows)
# Clear space in environment
rm(list = c("non_gradient", "acute", "final"))
# Column index
zones_1_8 <- c(2:9)
# Create new data frame with the number of experiments as objects and each temperature zone (1-8) as variables
non_grad_dat <- data.frame(t(sapply(non_gradient_separate, "[", zones_1_8)))
# add column with total count per experiment
non_grad_dat$count <- rowSums(matrix(unlist(non_grad_dat), ncol = 8, byrow = FALSE))
acute_dat <- data.frame(t(sapply(acute_separate, "[", zones_1_8)))
# add column with total count per experiment
acute_dat$count <- rowSums(matrix(unlist(acute_dat), ncol = 8, byrow = FALSE))
final_dat <- data.frame(t(sapply(final_separate, "[", zones_1_8)))
# add column with total count per experiment
final_dat$count <- rowSums(matrix(unlist(final_dat), ncol = 8, byrow = FALSE))
# Combine into non gradient, acute, and final observations into one data frame
combined_dat <- data.frame(rbind(non_grad_dat, acute_dat, final_dat))
tmp_dat <- combined_dat %>%
add_column(experiment = c(row.names.data.frame(non_grad_dat), row.names.data.frame(acute_dat), row.names.data.frame(final_dat)),
phase = c(rep("I", time = length(non_gradient_separate)), rep("II", time = length(acute_separate)), rep("III", time = length(final_separate))),
.before = colnames(non_grad_dat[1]))
if(exists("number_treatments") & number_groups > 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, each = number_groups, times = number_phases), .after = "phase") # Add treatments column; times = # experiments / # treatments * 3 phases
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else if (exists("number_treatments") & number_groups == 2) {
tmp_dat <- tmp_dat %>%
add_column(treatment = rep(treatments, times = nrow(non_grad_dat) / number_treatments * number_phases), .after = "phase")
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(4:11)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
} else {
rownames(tmp_dat) <- NULL # Remove row names
colnames(tmp_dat)[c(3:10)] <- c("z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8")
}
# Calculate percent use of each compartment per experiment
if(exists("number_treatments")) {
stats_df <- data.frame(tmp_dat[, 1:11])
stats_df[, 4:11] <- NA
for (ii in 1:nrow(combined_dat)) {
for (tt in 4:11)
stats_df[ii,tt] <- unlist(tmp_dat[ii, tt]) / tmp_dat$count[ii]
}
} else {
stats_df <- data.frame(tmp_dat[, 1:10])
stats_df[, 3:10] <- NA
for (ii in 1:nrow(combined_dat)) {
for (tt in 3:10)
stats_df[ii,tt] <- unlist(tmp_dat[ii, tt]) / tmp_dat$count[ii]
}
}
# Clear space in environment
rm(list = c("non_grad_dat", "acute_dat", "final_dat", "combined_dat", "tmp_dat"))
# C1: 33 degrees: compartment 4
# C2: 30 degrees: compartments 3 and 5
# C3: 27 degrees: compartments 2 and 6
# C4: 24 degrees: compartments 1 and 7
# C5: 21 degrees: compartment 8
if(exists("number_treatments")) {
prop_dat <- stats_df[, 1:3];
} else {
prop_dat <- stats_df[, 1:2];
}
prop_dat$C1 <- stats_df$z4;
prop_dat$C2 <- stats_df$z3 + stats_df$z5;
prop_dat$C3 <- stats_df$z2 + stats_df$z6;
prop_dat$C4 <- stats_df$z1 + stats_df$z7;
prop_dat$C5 <- stats_df$z8;
# Take the compartment C3 (21*C temperature compartment) as the denominator
prop_dat$LR1 <- log(prop_dat$C1/prop_dat$C3);
prop_dat$LR2 <- log(prop_dat$C2/prop_dat$C3);
prop_dat$LR3 <- log(prop_dat$C4/prop_dat$C3);
prop_dat$LR4 <- log(prop_dat$C5/prop_dat$C3);
prop_dat$LRA1 <- prop_dat$LR1 - log(0.5); # 0.5 = (1/8)/(1/4)
prop_dat$LRA2 <- prop_dat$LR2 - log(1); # 1 = (1/4)/(1/4)
prop_dat$LRA3 <- prop_dat$LR3 - log(1); # 1 = (1/4)/(1/4)
prop_dat$LRA4 <- prop_dat$LR4 - log(0.5); # 0.5 = (1/8)/(1/4)
# Second step - Apply combined_rows function again to sum total count over all experiments
non_gradient_count <- combined_rows(non_gradient_separate)
acute_count <- combined_rows(acute_separate)
final_count <- combined_rows(final_separate)
# Calculate total missing counts (i.e. Ethovision tracking error)
if(exists("number_treatments")) {
for(i in 1:length(treatments)) {
non_gradient_treatment_count <- combined_rows(non_gradient_separate[str_detect(names(non_gradient_separate), treatments[i])])
non_gradient_treatment_total_count <- sum(non_gradient_treatment_count[,zones_1_8])
non_gradient_treatment_missing_counts <-  (number_subjects * track_freq * length_phase * (nrow(prop_dat) / number_phases / length(treatments))) - non_gradient_treatment_total_count
non_gradient_treatment_percent_missed <- 100 * non_gradient_treatment_missing_counts / non_gradient_treatment_total_count;
print(paste(round(non_gradient_treatment_percent_missed, digits = 2), "% missed tracks during non-gradient phase,", treatments[i],"treatment", sep = " "))
}
for(i in 1:length(treatments)) {
acute_treatment_count <- combined_rows(acute_separate[str_detect(names(acute_separate), treatments[i])])
acute_treatment_total_count <- sum(acute_treatment_count[,zones_1_8])
acute_treatment_missing_counts <-  (number_subjects * track_freq * length_phase * (nrow(prop_dat) / number_phases / length(treatments))) - acute_treatment_total_count
acute_treatment_percent_missed <- 100 * acute_treatment_missing_counts / acute_treatment_total_count;
print(paste(round(acute_treatment_percent_missed, digits = 2), "% missed tracks during acute phase,", treatments[i],"treatment", sep = " "))
}
for(i in 1:length(treatments)) {
final_treatment_count <- combined_rows(final_separate[str_detect(names(final_separate), treatments[i])])
final_treatment_total_count <- sum(final_treatment_count[,zones_1_8])
final_treatment_missing_counts <-  (number_subjects * track_freq * length_phase * (nrow(prop_dat) / number_phases / length(treatments))) - final_treatment_total_count
final_treatment_percent_missed <- 100 * final_treatment_missing_counts / final_treatment_total_count;
print(paste(round(final_treatment_percent_missed, digits = 2), "% missed tracks during final phase,", treatments[i],"treatment", sep = " "))
}
non_gradient_total_count <- sum(non_gradient_count[,zones_1_8])
non_gradient_missing_counts <-  (number_subjects * track_freq * length_phase * (nrow(prop_dat) / number_phases)) - non_gradient_total_count
non_gradient_percent_missed <- 100 * non_gradient_missing_counts / non_gradient_total_count;
print(paste(round(non_gradient_percent_missed, digits = 2), "% missed tracks during non-gradient phase", sep = " "))
acute_total_count <- sum(acute_count[,zones_1_8])
acute_missing_counts <-  (number_subjects * track_freq * length_phase * (nrow(prop_dat) / number_phases)) - acute_total_count
acute_percent_missed <- 100 * acute_missing_counts / acute_total_count;
print(paste(round(acute_percent_missed, digits = 2), "% missed tracks during acute phase", sep = " "))
final_total_count <- sum(final_count[,zones_1_8])
final_missing_counts <-  (number_subjects * track_freq * length_phase * (nrow(prop_dat) / number_phases)) - final_total_count
final_percent_missed <- 100 * final_missing_counts / final_total_count;
print(paste(round(final_percent_missed, digits = 2), "% missed tracks during final phase", sep = " "))
} else {
non_gradient_total_count <- sum(non_gradient_count[,zones_1_8])
non_gradient_missing_counts <-  (number_subjects * track_freq * length_phase * (nrow(prop_dat) / number_phases)) - non_gradient_total_count
non_gradient_percent_missed <- 100 * non_gradient_missing_counts / non_gradient_total_count;
print(paste(round(non_gradient_percent_missed, digits = 2), "% missed tracks during non-gradient phase", sep = " "))
acute_total_count <- sum(acute_count[,zones_1_8])
acute_missing_counts <-  (number_subjects * track_freq * length_phase * (nrow(prop_dat) / number_phases)) - acute_total_count
acute_percent_missed <- 100 * acute_missing_counts / acute_total_count;
print(paste(round(acute_percent_missed, digits = 2), "% missed tracks during acute phase", sep = " "))
final_total_count <- sum(final_count[,zones_1_8])
final_missing_counts <-  (number_subjects * track_freq * length_phase * (nrow(prop_dat) / number_phases)) - final_total_count
final_percent_missed <- 100 * final_missing_counts / final_total_count;
print(paste(round(final_percent_missed, digits = 2), "% missed tracks during final phase", sep = " "))
}
